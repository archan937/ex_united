defmodule ExUnitedTest do
  use ExUnit.Case

  import TestHelper

  describe "zero-config" do
    setup do
      {:ok, spawned} = ExUnited.spawn([:ryan, :george, :bobby])

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "generates config and mix files", spawned do
      assert [
               [{'MIX_ENV', 'test'}, {'MIX_EXS', '/tmp/bobby-mix.exs'}],
               [{'MIX_ENV', 'test'}, {'MIX_EXS', '/tmp/george-mix.exs'}],
               [{'MIX_ENV', 'test'}, {'MIX_EXS', '/tmp/ryan-mix.exs'}]
             ] = take(spawned, :env)

      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [{:inch_ex, "~> 2.0", [only: :inch, runtime: false]}],
                   elixirc_paths: [],
                   config_path: "/tmp/bobby-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: []
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 []
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/bobby-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here
             """ == File.read!("/tmp/bobby-config.exs")
    end

    test "spins up \"partially\" connected nodes", spawned do
      captain = Node.self()
      nodes = take(spawned, :node)

      assert :"captain@127.0.0.1" = captain
      assert ^nodes = Node.list() |> Enum.sort()

      Enum.each(nodes, fn node ->
        assert [^captain] = :rpc.call(node, Node, :list, [])
      end)

      assert [
               "iex --name bobby@127.0.0.1 --erl '-connect_all false' -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'",
               "iex --name george@127.0.0.1 --erl '-connect_all false' -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'",
               "iex --name ryan@127.0.0.1 --erl '-connect_all false' -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'"
             ] = take(spawned, :command)
    end
  end

  describe "dependencies" do
    setup do
      {:ok, spawned} = ExUnited.spawn([:ryan], exclude: [:inch_ex])

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "excludes specified dependencies" do
      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [],
                   elixirc_paths: [],
                   config_path: "/tmp/ryan-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: []
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 []
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/ryan-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here
             """ == File.read!("/tmp/ryan-config.exs")
    end
  end

  describe "extra applications" do
    setup do
      {:ok, spawned} =
        ExUnited.spawn(
          [
            damian: [extra_applications: [:logger]]
          ],
          exclude: [:inch_ex]
        )

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "add extra applications" do
      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [],
                   elixirc_paths: [],
                   config_path: "/tmp/damian-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: [:logger]
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 []
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/damian-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here
             """ == File.read!("/tmp/damian-config.exs")
    end
  end

  describe "custom config path" do
    setup do
      generate_dummy_config()

      {:ok, spawned} =
        ExUnited.spawn(taylor: [config_path: "/tmp/custom/config.exs"])

      on_exit(fn ->
        File.rm_rf("/tmp/custom")
        ExUnited.teardown()
      end)

      spawned
    end

    test "excludes specified dependencies" do
      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [{:inch_ex, "~> 2.0", [only: :inch, runtime: false]}],
                   elixirc_paths: [],
                   config_path: "/tmp/taylor-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: []
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 []
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/taylor-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here

             config :void, [
               single_config: :single_value,
               multiple_config: [:multiple_value_one, :multiple_value_two],
               nested_config: [
                 nested_one: :nested_one,
                 nested_two: [:nested_two_value_one, :nested_two_value_two]
               ]
             ]

             config :another_app_config, [key: :value]
             """ == File.read!("/tmp/taylor-config.exs")
    end
  end

  test "mix exs creates config correctly" do
    assert """
           defmodule Void.MixProject do
             use Mix.Project
             def project do
               [
                 deps: [app: ">= 0.0.0", my_lib: [path: "../my_lib"]],
                 elixirc_paths: ["test/nodes/my_app"],
                 config_path: "/tmp/my_app-config.exs",
                 app: :void,
                 deps_path: "deps",
                 lockfile: "mix.lock",
                 version: "0.1.5",
                 elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
               ]
             end
             def application do
               [
                 mod: {Void.Application, []},
                 extra_applications: []
               ]
             end
           end

           defmodule Void.Application do
             use Application
             def start(_type, _args) do
               load_config()
               opts = [strategy: :one_for_one, name: Void.Supervisor]
               Supervisor.start_link([], opts)
             end
             defp load_config do
               []
               |> Enum.each(fn {app, env} ->
                 Enum.each(env, fn {key, value} ->
                   Application.put_env(app, key, value)
                 end)
               end)
             end
           end
           """ ==
             ExUnited.mix_exs(
               :my_app,
               [
                 exclude: :inch_ex,
                 include: [{:app, ">= 0.0.0"}]
               ],
               include: [{:my_lib, path: "../my_lib"}],
               code_paths: ["test/nodes/my_app"]
             )
  end

  test "config exs creates config correctly" do
    assert """
           use Mix.Config

           # Autogenerated config from here
           """ ==
             ExUnited.config_exs(
               [
                 exclude: :inch_ex,
                 include: [{:app, ">= 0.0.0"}]
               ],
               include: [{:my_lib, path: "../my_lib"}],
               code_paths: ["test/nodes/my_app"]
             )
  end

  test "config exs creates config correctly when using custom config path" do
    generate_dummy_config()

    assert """
           use Mix.Config

           # Autogenerated config from here

           config :void, [
             single_config: :single_value,
             multiple_config: [:multiple_value_one, :multiple_value_two],
             nested_config: [
               nested_one: :nested_one,
               nested_two: [:nested_two_value_one, :nested_two_value_two]
             ]
           ]

           config :another_app_config, [key: :value]
           """ ==
             ExUnited.config_exs(
               [
                 exclude: :inch_ex,
                 include: [{:app, ">= 0.0.0"}]
               ],
               config_path: "/tmp/custom/config.exs",
               include: [{:my_lib, path: "../my_lib"}],
               code_paths: ["test/nodes/my_app"]
             )
  end

  describe "fully connected" do
    setup do
      {:ok, spawned} = ExUnited.spawn([:denis, :paul, :duncan], [:connect])

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "spins up fully connected nodes", spawned do
      captain = Node.self()
      nodes = take(spawned, :node)

      assert :"captain@127.0.0.1" = captain
      assert ^nodes = Node.list() |> Enum.sort()

      Enum.each(nodes, fn node ->
        other_nodes = [captain] ++ Enum.sort(nodes -- [node])
        assert ^other_nodes = :rpc.call(node, Node, :list, []) |> Enum.sort()
      end)

      assert [
               "iex --name denis@127.0.0.1 -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'",
               "iex --name duncan@127.0.0.1 -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'",
               "iex --name paul@127.0.0.1 -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'"
             ] = take(spawned, :command)
    end
  end

  describe "configured" do
    setup do
      {:ok, spawned} =
        ExUnited.spawn(
          eric: [
            code_paths: [
              "test/nodes/cantona"
            ]
          ]
        )

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "spins up configured nodes", spawned do
      captain = Node.self()
      [eric] = nodes = take(spawned, :node)

      assert :"captain@127.0.0.1" = captain
      assert ^nodes = Node.list() |> Enum.sort()

      Enum.each(nodes, fn node ->
        other_nodes = [captain] ++ Enum.sort(nodes -- [node])
        assert ^other_nodes = :rpc.call(node, Node, :list, []) |> Enum.sort()
      end)

      assert [
               "iex --name eric@127.0.0.1 --erl '-connect_all false' -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'"
             ] = take(spawned, :command)

      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [{:inch_ex, "~> 2.0", [only: :inch, runtime: false]}],
                   elixirc_paths: ["test/nodes/cantona"],
                   config_path: "/tmp/eric-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: []
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 [void: [question: "T'as pigé?"]]
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/eric-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here

             config :void, [question: \"T'as pigé?\"]
             """ == File.read!("/tmp/eric-config.exs")

      assert "T'as pigé?" =
               :rpc.call(eric, Application, :get_env, [:void, :question])
    end
  end

  describe "configured and using custom config path" do
    setup do
      generate_dummy_config()

      {:ok, spawned} =
        ExUnited.spawn(
          john: [
            code_paths: [
              "test/nodes/cantona"
            ]
          ]
        )

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "spins up configured nodes", spawned do
      captain = Node.self()
      [john] = nodes = take(spawned, :node)

      assert :"captain@127.0.0.1" = captain
      assert ^nodes = Node.list() |> Enum.sort()

      Enum.each(nodes, fn node ->
        other_nodes = [captain] ++ Enum.sort(nodes -- [node])
        assert ^other_nodes = :rpc.call(node, Node, :list, []) |> Enum.sort()
      end)

      assert [
               "iex --name john@127.0.0.1 --erl '-connect_all false' -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'"
             ] = take(spawned, :command)

      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [{:inch_ex, "~> 2.0", [only: :inch, runtime: false]}],
                   elixirc_paths: ["test/nodes/cantona"],
                   config_path: "/tmp/john-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: []
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 [void: [question: "T'as pigé?"]]
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/john-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here

             config :void, [question: \"T'as pigé?\"]
             """ == File.read!("/tmp/john-config.exs")

      assert "T'as pigé?" =
               :rpc.call(john, Application, :get_env, [:void, :question])
    end
  end

  describe "code paths" do
    setup do
      {:ok, spawned} =
        ExUnited.spawn(
          wayne: [
            code_paths: [
              "test/nodes/rooney"
            ]
          ]
        )

      on_exit(fn ->
        ExUnited.teardown()
      end)

      spawned
    end

    test "spins up nodes with loaded code paths", spawned do
      captain = Node.self()
      [wayne] = nodes = take(spawned, :node)

      assert :"captain@127.0.0.1" = captain
      assert ^nodes = Node.list() |> Enum.sort()

      Enum.each(nodes, fn node ->
        other_nodes = [captain] ++ Enum.sort(nodes -- [node])
        assert ^other_nodes = :rpc.call(node, Node, :list, []) |> Enum.sort()
      end)

      assert [
               "iex --name wayne@127.0.0.1 --erl '-connect_all false' -S mix run -e 'Node.connect(:\"captain@127.0.0.1\")'"
             ] = take(spawned, :command)

      assert """
             defmodule Void.MixProject do
               use Mix.Project
               def project do
                 [
                   deps: [{:inch_ex, "~> 2.0", [only: :inch, runtime: false]}],
                   elixirc_paths: ["test/nodes/rooney"],
                   config_path: "/tmp/wayne-config.exs",
                   app: :void,
                   deps_path: "deps",
                   lockfile: "mix.lock",
                   version: "0.1.5",
                   elixir: "#{Keyword.get(Mix.Project.config(), :elixir)}"
                 ]
               end
               def application do
                 [
                   mod: {Void.Application, []},
                   extra_applications: []
                 ]
               end
             end

             defmodule Void.Application do
               use Application
               def start(_type, _args) do
                 load_config()
                 opts = [strategy: :one_for_one, name: Void.Supervisor]
                 Supervisor.start_link([], opts)
               end
               defp load_config do
                 []
                 |> Enum.each(fn {app, env} ->
                   Enum.each(env, fn {key, value} ->
                     Application.put_env(app, key, value)
                   end)
                 end)
               end
             end
             """ == File.read!("/tmp/wayne-mix.exs")

      assert """
             use Mix.Config

             # Autogenerated config from here
             """ == File.read!("/tmp/wayne-config.exs")

      assert "Hey, my name is Wayne Rooney. Not Bruce Wayne :D" =
               :rpc.call(wayne, Wayne, :hello?, [])
    end
  end
end
